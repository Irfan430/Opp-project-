version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: cybersec-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - cybersec-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: cybersec-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - cybersec-network

  # Backend API (Node.js + Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cybersec-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      ML_SERVICE_URL: http://ml-service:8000
      FRONTEND_URL: ${FRONTEND_URL}
    depends_on:
      - mongodb
      - redis
      - ml-service
    volumes:
      - ./shared:/app/shared
      - scan_results:/app/scan_results
      - pdf_reports:/app/pdf_reports
    networks:
      - cybersec-network

  # ML Service (FastAPI + Python)
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: cybersec-ml-service
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      PYTHONPATH: /app
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      MODEL_PATH: /app/models
    depends_on:
      - redis
    volumes:
      - ./shared:/app/shared
      - ml_models:/app/models
    networks:
      - cybersec-network

  # Frontend (React + Tailwind)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cybersec-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL}
      REACT_APP_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
    depends_on:
      - backend
    networks:
      - cybersec-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cybersec-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - cybersec-network

volumes:
  mongodb_data:
  redis_data:
  scan_results:
  pdf_reports:
  ml_models:

networks:
  cybersec-network:
    driver: bridge